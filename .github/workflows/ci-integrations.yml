name: CI & Build

on:
  pull_request:
    branches:
      - develop
  push:
    branches:
      - develop
      - main
      - "feature/**"
  workflow_dispatch:

permissions:
  contents: read
  packages: write

jobs:
  build-auth-api:
    runs-on: ubuntu-latest
    defaults: { run: { working-directory: auth-api } }
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with: { go-version: "1.18" }
      - run: go test ./...
      - run: go build -o auth-api

  build-users-api:
    runs-on: ubuntu-latest
    defaults: { run: { working-directory: users-api } }
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "8"
      - run: mvn -B clean package -DskipTests

  build-todos-api:
    runs-on: ubuntu-latest
    defaults: { run: { working-directory: todos-api } }
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: "18" }
      - run: npm ci || npm install
      - run: npm test

  build-frontend:
    runs-on: ubuntu-latest
    defaults: { run: { working-directory: frontend } }
    steps:
      - uses: actions/checkout@v4
      - name: Build frontend in Node 8 container
        run: |
          docker run --rm \
            -v "$PWD":/app -w /app \
            node:8 bash -lc "npm install && npm run build"

  build-log-processor:
    runs-on: ubuntu-latest
    defaults: { run: { working-directory: log-message-processor } }
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.10" }
      - run: pip install -r requirements.txt
      - run: python -m py_compile main.py

  docker:
    needs:
      - build-auth-api
      - build-users-api
      - build-todos-api
      - build-frontend
      - build-log-processor
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/feature/')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Compute tag
        id: vars
        run: |
          BRANCH=${GITHUB_REF_NAME//\//-}
          echo "TAG=${BRANCH}-${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      - name: Build & push images
        run: |
          OWNER=${GITHUB_REPOSITORY_OWNER,,}
          TAG='${{ steps.vars.outputs.TAG }}'
          docker build -t ghcr.io/$OWNER/auth-api:$TAG ./auth-api
          docker build -t ghcr.io/$OWNER/users-api:$TAG ./users-api
          docker build -t ghcr.io/$OWNER/todos-api:$TAG ./todos-api
          docker build -t ghcr.io/$OWNER/frontend:$TAG ./frontend
          docker build -t ghcr.io/$OWNER/log-message-processor:$TAG ./log-message-processor
          docker push ghcr.io/$OWNER/auth-api:$TAG
          docker push ghcr.io/$OWNER/users-api:$TAG
          docker push ghcr.io/$OWNER/todos-api:$TAG
          docker push ghcr.io/$OWNER/frontend:$TAG
          docker push ghcr.io/$OWNER/log-message-processor:$TAG

  integration:
    needs: docker
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      # Opcional: exportar las imágenes desde GHCR al compose por tag
      # - name: Login to GHCR (pull)
      #   uses: docker/login-action@v3
      #   with:
      #     registry: ghcr.io
      #     username: ${{ github.actor }}
      #     password: ${{ secrets.GITHUB_TOKEN }}

      - name: Compose up
        run: |
          docker compose up -d --build
          # Espera activa hasta que /login responda 200
          for i in {1..30}; do
            curl -sf -o /dev/null http://localhost:8000/login && break
            echo "Esperando auth-api... ($i)"
            sleep 2
          done
          # Espera activa a Zipkin (puerto 9411)
          for i in {1..30}; do
            curl -sf -o /dev/null http://localhost:9411/ && break
            echo "Esperando zipkin... ($i)"
            sleep 2
          done
          # Espera activa al log-message-processor inicializado (busca mensaje en logs)
          for i in {1..30}; do
            docker compose logs log-message-processor 2>/dev/null | grep -q "Waiting for messages" && break || true
            echo "Esperando log-message-processor... ($i)"
            sleep 2
          done

      - name: Smoke Test
        run: |
          TOKEN=$(curl -s -X POST http://localhost:8000/login \
            -H "Content-Type: application/json" \
            -d '{"username":"admin","password":"admin"}' | jq -r .accessToken)
          echo "TOKEN=${TOKEN:0:10}..."
          curl -s -H "Authorization: Bearer $TOKEN" -X POST \
            http://localhost:8082/todos -H "Content-Type: application/json" \
            -d '{"content":"demo"}'
          curl -s -H "Authorization: Bearer $TOKEN" http://localhost:8082/todos

  retry-test:
    needs: docker
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq
      - name: Run deterministic retry test with WireMock
        run: |
          chmod +x ./scripts/test-retry.sh
          ./scripts/test-retry.sh

  breaker-test:
    needs: docker
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install jq (optional)
        run: sudo apt-get update && sudo apt-get install -y jq
      - name: Compose up (base stack)
        run: |
          docker compose up -d --build
          # Espera a que el endpoint del breaker esté disponible
          for i in {1..30}; do
            curl -sf -o /dev/null http://localhost:8000/status/circuit-breaker && break
            echo "Esperando circuit-breaker... ($i)"
            sleep 2
          done
      - name: Run circuit breaker test
        run: |
          bash scripts/cb-test.sh

  todos-cache-test:
    needs: docker
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: "18" }
      - name: Install deps
        working-directory: todos-api
        run: npm ci || npm install
      - name: Run todos-api cache-aside tests
        working-directory: todos-api
        run: npm test

  rate-limit-test:
    needs: docker
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Compose up (base stack)
        run: |
          docker compose up -d --build
          # Espera al gateway (frontend NGINX)
          for i in {1..30}; do
            curl -sf -o /dev/null http://localhost:3000/ && break
            echo "Esperando gateway (frontend)... ($i)"
            sleep 2
          done
          # Espera a auth-api también para login
          for i in {1..30}; do
            curl -sf -o /dev/null http://localhost:8000/version && break
            echo "Esperando auth-api... ($i)"
            sleep 2
          done
      - name: Run rate limiting test
        run: |
          chmod +x ./scripts/rate-limit-test.sh
          ./scripts/rate-limit-test.sh | tee rate-limit-result.json
